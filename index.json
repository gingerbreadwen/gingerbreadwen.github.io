[{"categories":["pytorch框架"],"content":"pytorch的数据操作","date":"2021-03-19","objectID":"/pytorch-data/","tags":["入门","框架","数据输入"],"title":"Pytorch深度学习框架入门-数据输入","uri":"/pytorch-data/"},{"categories":["pytorch框架"],"content":"简要介绍pytorch的数据读取与加载 数据输入 ","date":"2021-03-19","objectID":"/pytorch-data/:0:0","tags":["入门","框架","数据输入"],"title":"Pytorch深度学习框架入门-数据输入","uri":"/pytorch-data/"},{"categories":["pytorch框架"],"content":"数据集加载 PyTorch提供的原始数据输入方法: torch.utils.data.DataLoader 和 torch.utils.data.Dataset。 torch.utils.data.DataLoader torch.utils.data.Dataset import torch from torch.utils.data import Dataset from torchvision import datasets from torchvision.transforms import ToTensor, Lambda import matplotlib.pyplot as plt training_data = datasets.FashionMNIST( root=\"data\", # 路径 train=True, # 加载的训练集 download=True, # 如果路径不包含数据集，则从网络下载数据集 transform=ToTensor() # 数据集内容转化为张量 ) test_data = datasets.FashionMNIST( root=\"data\", train=False, download=True, transform=ToTensor() ) ","date":"2021-03-19","objectID":"/pytorch-data/:1:0","tags":["入门","框架","数据输入"],"title":"Pytorch深度学习框架入门-数据输入","uri":"/pytorch-data/"},{"categories":["pytorch框架"],"content":"自定义数据集 自定义的数据集包含整个数据 len返回数据的长度 getitem索引数据 init读取数据 ","date":"2021-03-19","objectID":"/pytorch-data/:2:0","tags":["入门","框架","数据输入"],"title":"Pytorch深度学习框架入门-数据输入","uri":"/pytorch-data/"},{"categories":["pytorch框架"],"content":"数据加载器 minibatches reshuffle multiproccessing 加速数据检索 # Display image and label. train_features, train_labels = next(iter(train_dataloader)) #使得dataloader由可迭代变为迭代器，并获取特征与标签 print(f\"Feature batch shape: {train_features.size()}\") print(f\"Labels batch shape: {train_labels.size()}\") img = train_features[0].squeeze() label = train_labels[0] plt.imshow(img, cmap=\"gray\") plt.show() print(f\"Label: {label}\") ","date":"2021-03-19","objectID":"/pytorch-data/:3:0","tags":["入门","框架","数据输入"],"title":"Pytorch深度学习框架入门-数据输入","uri":"/pytorch-data/"},{"categories":["pytorch框架"],"content":"pytorch的张量操作","date":"2021-03-15","objectID":"/pytorch/","tags":["入门","框架"],"title":"Pytorch深度学习框架入门-张量","uri":"/pytorch/"},{"categories":["pytorch框架"],"content":"了解Pytorch中关于张量的内容 张量 Pytorch官网解释张量为一种特殊的数据结构，给我的感觉是一种数据的分组方式，从最小的一组开始分组，然后逐渐分大组，感觉上类似对数据进行抽象，逐渐形成不同层次的概念，hierarchy of abstract？ Pytorch中的张量与NumPy的ndarrays数据类型相似,两者可以相互转换。 导入torch与numpy包 import torch import numpy as np ","date":"2021-03-15","objectID":"/pytorch/:0:0","tags":["入门","框架"],"title":"Pytorch深度学习框架入门-张量","uri":"/pytorch/"},{"categories":["pytorch框架"],"content":"生成张量 已有shape的数据生成张量 自定义一个shape大小 赋值给torch numpy转张量 torch.tensor(data) # data为列表形式[[1,2],[3,4]] torch.rand_like(data) # 根据data的shape，来确定张量的shape torch.ones_like(data) torch.rand(shape) # shape为元组形式(2,4,) torch.ones(shape) # 根据元组，来确定张量的shape torch,zeros(shape) torch.rand(x,y,z) # x,y,z为整数 torch.ones(x,y,z) t1 = torch.from_numpy(x) # x是numpy的数据类型 t1.numpy() # 张量转numpy ","date":"2021-03-15","objectID":"/pytorch/:1:0","tags":["入门","框架"],"title":"Pytorch深度学习框架入门-张量","uri":"/pytorch/"},{"categories":["pytorch框架"],"content":"操作张量 基本数学运算 复杂数学运算-函数 # This computes the matrix multiplication between two tensors. y1, y2, y3 will have the same value # 矩阵乘法 y1 = tensor @ tensor.T # @ matmul y2 = tensor.matmul(tensor.T) y3 = torch.rand_like(tensor) torch.matmul(tensor, tensor.T, out=y3) # This computes the element-wise product. z1, z2, z3 will have the same value # 对应位置元素相乘 z1 = tensor * tensor # * z2 = tensor.mul(tensor) z3 = torch.rand_like(tensor) torch.mul(tensor, tensor, out=z3) torch.full((3,2),46) # 形成只有一个数值的张量 torch.sin(t) # 对张量的每个元素进行sin torch.reshape(4,3,5) # 对张量的数值重新分组 ","date":"2021-03-15","objectID":"/pytorch/:2:0","tags":["入门","框架"],"title":"Pytorch深度学习框架入门-张量","uri":"/pytorch/"}]